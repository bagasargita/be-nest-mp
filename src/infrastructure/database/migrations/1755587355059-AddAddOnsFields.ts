import { MigrationInterface, QueryRunner } from "typeorm";

export class AddAddOnsFields1755587355059 implements MigrationInterface {
    name = 'AddAddOnsFields1755587355059'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "m_account_tax_rule" DROP CONSTRAINT "FK_account_tax_rule_account"`);
        await queryRunner.query(`ALTER TABLE "m_account_package_tier" DROP CONSTRAINT "FK_account_package_tier_account"`);
        await queryRunner.query(`ALTER TABLE "m_account_billing_method" DROP CONSTRAINT "FK_account_billing_method_account"`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" DROP CONSTRAINT "FK_account_add_ons_account"`);
        await queryRunner.query(`ALTER TABLE "m_account_term_of_payment" DROP CONSTRAINT "FK_account_term_of_payment_account"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_account_tax_rule_account_id"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_account_tax_rule_active"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_account_package_tier_account_id"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_account_package_tier_date_range"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_account_package_tier_value_range"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_account_package_tier_active"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_account_billing_method_account_id"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_account_billing_method_active"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_account_add_ons_type"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_account_add_ons_billing_type"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_account_add_ons_date_range"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_account_term_of_payment_account_id"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_account_term_of_payment_active"`);
        await queryRunner.query(`ALTER TABLE "m_account_tax_rule" DROP CONSTRAINT "CHK_account_tax_rule_rate"`);
        await queryRunner.query(`ALTER TABLE "m_account_package_tier" DROP CONSTRAINT "CHK_account_package_tier_value_range"`);
        await queryRunner.query(`ALTER TABLE "m_account_package_tier" DROP CONSTRAINT "CHK_account_package_tier_date_range"`);
        await queryRunner.query(`ALTER TABLE "m_account_package_tier" DROP CONSTRAINT "CHK_account_package_tier_positive_values"`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" DROP CONSTRAINT "CHK_account_add_ons_positive_amount"`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" DROP CONSTRAINT "CHK_account_add_ons_date_range"`);
        await queryRunner.query(`ALTER TABLE "m_account_term_of_payment" DROP CONSTRAINT "CHK_account_term_of_payment_days"`);
        await queryRunner.query(`ALTER TABLE "m_account_term_of_payment" DROP CONSTRAINT "CHK_account_term_of_payment_late_fee"`);
        await queryRunner.query(`ALTER TABLE "m_account_term_of_payment" DROP CONSTRAINT "CHK_account_term_of_payment_grace_period"`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" ADD "api_type" character varying(100)`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."api_type" IS 'API type for system integration'`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" ADD "complexity_level" character varying(100)`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."complexity_level" IS 'Complexity level for system integration'`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" ADD "base_fee" numeric(15,2)`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."base_fee" IS 'Base fee for system integration'`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" ADD "requires_custom_development" boolean NOT NULL DEFAULT false`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."requires_custom_development" IS 'Whether custom development is required'`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" ADD "custom_development_fee" numeric(15,2) NOT NULL DEFAULT '0'`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."custom_development_fee" IS 'Custom development fee'`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" ADD "billing_method_type" character varying(50) NOT NULL DEFAULT 'auto_deduct'`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."billing_method_type" IS 'Billing method type'`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" ADD "custom_fee" numeric(15,2) NOT NULL DEFAULT '0'`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."custom_fee" IS 'Custom fee for post paid billing'`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" ADD "infrastructure_type" character varying(100)`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."infrastructure_type" IS 'Infrastructure type'`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" ADD "resource_size" character varying(100)`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."resource_size" IS 'Resource size for infrastructure'`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" ADD "monthly_fee" numeric(15,2)`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."monthly_fee" IS 'Monthly fee for infrastructure'`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" ADD "setup_fee" numeric(15,2) NOT NULL DEFAULT '0'`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."setup_fee" IS 'Setup fee for infrastructure'`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" ADD "is_scalable" boolean NOT NULL DEFAULT false`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."is_scalable" IS 'Whether infrastructure is scalable'`);
        await queryRunner.query(`ALTER TABLE "m_postal_code" ALTER COLUMN "country" SET NOT NULL`);
        await queryRunner.query(`ALTER TABLE "m_account_tax_rule" ALTER COLUMN "created_at" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "m_account_tax_rule" ALTER COLUMN "updated_at" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "m_account_package_tier" ALTER COLUMN "created_at" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "m_account_package_tier" ALTER COLUMN "updated_at" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "m_account_billing_method" ALTER COLUMN "created_at" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "m_account_billing_method" ALTER COLUMN "updated_at" SET DEFAULT now()`);
        await queryRunner.query(`DROP INDEX "public"."IDX_account_add_ons_active"`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."account_id" IS NULL`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" ALTER COLUMN "created_at" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" ALTER COLUMN "updated_at" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "m_account_term_of_payment" ALTER COLUMN "created_at" SET DEFAULT now()`);
        await queryRunner.query(`ALTER TABLE "m_account_term_of_payment" ALTER COLUMN "updated_at" SET DEFAULT now()`);
        await queryRunner.query(`CREATE INDEX "IDX_account_add_ons_active" ON "m_account_add_ons" ("account_id", "is_active") `);
        await queryRunner.query(`ALTER TABLE "m_account_package_tier" ADD CONSTRAINT "FK_18e40b9d039225eff26879df62f" FOREIGN KEY ("account_id") REFERENCES "m_account"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "m_account_package_tier" DROP CONSTRAINT "FK_18e40b9d039225eff26879df62f"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_account_add_ons_active"`);
        await queryRunner.query(`ALTER TABLE "m_account_term_of_payment" ALTER COLUMN "updated_at" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "m_account_term_of_payment" ALTER COLUMN "created_at" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" ALTER COLUMN "updated_at" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" ALTER COLUMN "created_at" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."account_id" IS 'Reference to account'`);
        await queryRunner.query(`CREATE INDEX "IDX_account_add_ons_active" ON "m_account_add_ons" ("account_id", "is_active") `);
        await queryRunner.query(`ALTER TABLE "m_account_billing_method" ALTER COLUMN "updated_at" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "m_account_billing_method" ALTER COLUMN "created_at" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "m_account_package_tier" ALTER COLUMN "updated_at" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "m_account_package_tier" ALTER COLUMN "created_at" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "m_account_tax_rule" ALTER COLUMN "updated_at" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "m_account_tax_rule" ALTER COLUMN "created_at" SET DEFAULT CURRENT_TIMESTAMP`);
        await queryRunner.query(`ALTER TABLE "m_postal_code" ALTER COLUMN "country" DROP NOT NULL`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."is_scalable" IS 'Whether infrastructure is scalable'`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" DROP COLUMN "is_scalable"`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."setup_fee" IS 'Setup fee for infrastructure'`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" DROP COLUMN "setup_fee"`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."monthly_fee" IS 'Monthly fee for infrastructure'`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" DROP COLUMN "monthly_fee"`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."resource_size" IS 'Resource size for infrastructure'`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" DROP COLUMN "resource_size"`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."infrastructure_type" IS 'Infrastructure type'`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" DROP COLUMN "infrastructure_type"`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."custom_fee" IS 'Custom fee for post paid billing'`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" DROP COLUMN "custom_fee"`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."billing_method_type" IS 'Billing method type'`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" DROP COLUMN "billing_method_type"`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."custom_development_fee" IS 'Custom development fee'`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" DROP COLUMN "custom_development_fee"`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."requires_custom_development" IS 'Whether custom development is required'`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" DROP COLUMN "requires_custom_development"`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."base_fee" IS 'Base fee for system integration'`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" DROP COLUMN "base_fee"`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."complexity_level" IS 'Complexity level for system integration'`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" DROP COLUMN "complexity_level"`);
        await queryRunner.query(`COMMENT ON COLUMN "m_account_add_ons"."api_type" IS 'API type for system integration'`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" DROP COLUMN "api_type"`);
        await queryRunner.query(`ALTER TABLE "m_account_term_of_payment" ADD CONSTRAINT "CHK_account_term_of_payment_grace_period" CHECK (((grace_period IS NULL) OR (grace_period >= 0)))`);
        await queryRunner.query(`ALTER TABLE "m_account_term_of_payment" ADD CONSTRAINT "CHK_account_term_of_payment_late_fee" CHECK (((late_fee_rate IS NULL) OR ((late_fee_rate >= (0)::numeric) AND (late_fee_rate <= (100)::numeric))))`);
        await queryRunner.query(`ALTER TABLE "m_account_term_of_payment" ADD CONSTRAINT "CHK_account_term_of_payment_days" CHECK ((due_days > 0))`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" ADD CONSTRAINT "CHK_account_add_ons_date_range" CHECK (((start_date IS NULL) OR (end_date IS NULL) OR (start_date <= end_date)))`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" ADD CONSTRAINT "CHK_account_add_ons_positive_amount" CHECK ((amount >= (0)::numeric))`);
        await queryRunner.query(`ALTER TABLE "m_account_package_tier" ADD CONSTRAINT "CHK_account_package_tier_positive_values" CHECK (((min_value >= (0)::numeric) AND (max_value > (0)::numeric) AND (amount >= (0)::numeric)))`);
        await queryRunner.query(`ALTER TABLE "m_account_package_tier" ADD CONSTRAINT "CHK_account_package_tier_date_range" CHECK ((start_date < end_date))`);
        await queryRunner.query(`ALTER TABLE "m_account_package_tier" ADD CONSTRAINT "CHK_account_package_tier_value_range" CHECK ((min_value < max_value))`);
        await queryRunner.query(`ALTER TABLE "m_account_tax_rule" ADD CONSTRAINT "CHK_account_tax_rule_rate" CHECK (((rate >= (0)::numeric) AND (rate <= (100)::numeric)))`);
        await queryRunner.query(`CREATE INDEX "IDX_account_term_of_payment_active" ON "m_account_term_of_payment" ("account_id", "is_active") `);
        await queryRunner.query(`CREATE INDEX "IDX_account_term_of_payment_account_id" ON "m_account_term_of_payment" ("account_id") `);
        await queryRunner.query(`CREATE INDEX "IDX_account_add_ons_date_range" ON "m_account_add_ons" ("end_date", "start_date") `);
        await queryRunner.query(`CREATE INDEX "IDX_account_add_ons_billing_type" ON "m_account_add_ons" ("account_id", "billing_type", "is_active") `);
        await queryRunner.query(`CREATE INDEX "IDX_account_add_ons_type" ON "m_account_add_ons" ("account_id", "add_ons_type", "is_active") `);
        await queryRunner.query(`CREATE INDEX "IDX_account_billing_method_active" ON "m_account_billing_method" ("account_id", "is_active") `);
        await queryRunner.query(`CREATE INDEX "IDX_account_billing_method_account_id" ON "m_account_billing_method" ("account_id") `);
        await queryRunner.query(`CREATE INDEX "IDX_account_package_tier_active" ON "m_account_package_tier" ("is_active") `);
        await queryRunner.query(`CREATE INDEX "IDX_account_package_tier_value_range" ON "m_account_package_tier" ("max_value", "min_value") `);
        await queryRunner.query(`CREATE INDEX "IDX_account_package_tier_date_range" ON "m_account_package_tier" ("end_date", "start_date") `);
        await queryRunner.query(`CREATE INDEX "IDX_account_package_tier_account_id" ON "m_account_package_tier" ("account_id") `);
        await queryRunner.query(`CREATE INDEX "IDX_account_tax_rule_active" ON "m_account_tax_rule" ("account_id", "is_active") `);
        await queryRunner.query(`CREATE INDEX "IDX_account_tax_rule_account_id" ON "m_account_tax_rule" ("account_id") `);
        await queryRunner.query(`ALTER TABLE "m_account_term_of_payment" ADD CONSTRAINT "FK_account_term_of_payment_account" FOREIGN KEY ("account_id") REFERENCES "m_account"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "m_account_add_ons" ADD CONSTRAINT "FK_account_add_ons_account" FOREIGN KEY ("account_id") REFERENCES "m_account"("id") ON DELETE CASCADE ON UPDATE CASCADE`);
        await queryRunner.query(`ALTER TABLE "m_account_billing_method" ADD CONSTRAINT "FK_account_billing_method_account" FOREIGN KEY ("account_id") REFERENCES "m_account"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "m_account_package_tier" ADD CONSTRAINT "FK_account_package_tier_account" FOREIGN KEY ("account_id") REFERENCES "m_account"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "m_account_tax_rule" ADD CONSTRAINT "FK_account_tax_rule_account" FOREIGN KEY ("account_id") REFERENCES "m_account"("id") ON DELETE CASCADE ON UPDATE NO ACTION`);
    }

}
